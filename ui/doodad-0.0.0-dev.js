;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var AppBar, Button, Doodad, Layout, Popover, StringInput;

  AppBar = require('./components/AppBar');

  Button = require('./components/Button');

  Popover = require('./components/Popover');

  StringInput = require('./components/StringInput');

  Layout = require('./components/Layout');

  Doodad = {
    AppBar: AppBar,
    Button: Button,
    Layout: Layout,
    Popover: Popover,
    StringInput: StringInput,
    VERSION: '0.0.0'
  };

  window.Doodad = Doodad;

}).call(this);

},{"./components/AppBar":2,"./components/Button":3,"./components/Popover":4,"./components/StringInput":5,"./components/Layout":6}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var AppBar, View, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = Backbone.View;

  AppBar = (function(_super) {
    __extends(AppBar, _super);

    function AppBar() {
      this.addToTail = __bind(this.addToTail, this);
      this.addToHead = __bind(this.addToHead, this);
      this.render = __bind(this.render, this);
      this.attachTo = __bind(this.attachTo, this);      _ref = AppBar.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AppBar.__doc__ = '';

    AppBar._name = 'AppBar';

    AppBar.prototype.initialize = function(options) {
      console.log('AppBar.initialize');
      this._options = _.extend({}, {
        head: [],
        tail: [],
        responsive: true,
        pinned: true,
        position: 'top',
        attach_to: 'body',
        inject_padding: true
      }, options);
      this._validateOptions();
      this._setClasses();
      if (this._options.attach_to) {
        return this.attachTo($(this._options.attach_to));
      }
    };

    AppBar.prototype._validateOptions = function() {
      var _ref1;

      if ((_ref1 = !this._options.position) === 'top' || _ref1 === 'bottom' || _ref1 === 'left' || _ref1 === 'right') {
        throw new Error("AppBar position must be one of 'top', 'bottom', 'left', 'right'. Got: " + this._options.position);
      }
    };

    AppBar.prototype._setClasses = function() {
      this.$el.addClass(this.constructor._name);
      this.$el.addClass("AppBar-" + this._options.position);
      if (this._options.responsive) {
        return this.$el.addClass('AppBar-responsive');
      }
    };

    AppBar.prototype.attachTo = function($target_el) {
      var _this = this;

      this.$el.detach();
      $target_el.append(this.render());
      return _.defer(function() {
        var css_to_set, head_width, tail_width, _ref1;

        if ((_ref1 = _this._options.position) === 'left' || _ref1 === 'right') {
          head_width = _this.$el.find('.AppBar-head').width();
          tail_width = _this.$el.find('.AppBar-tail').width();
          if (head_width < tail_width) {
            head_width = tail_width;
          }
          _this.$el.css({
            width: head_width
          });
        }
        if (_this._options.inject_padding) {
          css_to_set = {
            'padding-top': 0,
            'padding-bottom': 0,
            'padding-left': 0,
            'padding-right': 0
          };
          switch (_this._options.position) {
            case 'top':
              css_to_set['padding-top'] = _this.$el.height();
              break;
            case 'bottom':
              css_to_set['padding-bottom'] = _this.$el.height();
              break;
            case 'left':
              css_to_set['padding-left'] = _this.$el.width();
              break;
            case 'right':
              css_to_set['padding-right'] = _this.$el.width();
          }
          return $target_el.css(css_to_set);
        }
      });
    };

    AppBar.prototype.render = function() {
      var $head, $tail;

      this.$el.html("<div class='AppBar-head'></div>\n<div class='AppBar-tail'></div>");
      $head = this.$el.find('.AppBar-head');
      _.each(this._options.head, function(element) {
        return $head.append(element.render());
      });
      $tail = this.$el.find('.AppBar-tail');
      _.each(this._options.tail, function(element) {
        return $tail.append(element.render());
      });
      return this.el;
    };

    AppBar.prototype.addToHead = function(item) {
      this._options.head.push(item);
      return this.render();
    };

    AppBar.prototype.addToTail = function(item) {
      this._options.tail.push(item);
      return this.render();
    };

    return AppBar;

  })(View);

  module.exports = AppBar;

}).call(this);

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var Button, DOC_URL, View, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = Backbone.View;

  DOC_URL = 'http://example.com/';

  Button = (function(_super) {
    __extends(Button, _super);

    function Button() {
      this._handleClick = __bind(this._handleClick, this);      _ref = Button.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Button.__doc__ = "A basic button class. See " + DOC_URL + "button/";

    Button.prototype.tagName = 'BUTTON';

    Button.prototype.className = 'Button';

    Button.prototype.initialize = function(options) {
      this._is_enabled = true;
      this._options = _.extend({}, {
        type: 'text',
        label: null,
        "class": null,
        helptext: null,
        enabled: true,
        spinner: false,
        progress: null,
        extra_classes: []
      }, options);
      this._validateOptions();
      if (!this._options.enabled) {
        this.disable();
      }
      return this.render();
    };

    Button.prototype._validateOptions = function() {
      var _ref1;

      if ((_ref1 = !this._options.type) === 'text' || _ref1 === 'icon' || _ref1 === 'icon+text') {
        throw new Error("Button type must be one of 'text', 'icon', 'icon+text', got " + this._options.type + ".");
      }
      if (this._options.type === 'text' && !this._options.label) {
        throw new Error("Buttons of type='text' MUST have a label set.");
      }
      if ((this._options.action == null) && (this._options.url == null)) {
        throw new Error("A Button action function or url must be specified.");
      }
    };

    Button.prototype._setClasses = function() {
      var class_list, _ref1,
        _this = this;

      class_list = this._options.type.split('+');
      if (this._options.spinner) {
        class_list.push('spinner');
      }
      if (((_ref1 = this._options["class"]) != null ? _ref1.length : void 0) > 0) {
        class_list.push.apply(class_list, this._options["class"].split(' '));
      }
      class_list = _.map(class_list, function(c) {
        return "" + _this.className + "-" + c;
      });
      class_list.push.apply(class_list, this._options.extra_classes);
      return this.$el.addClass(class_list.join(' '));
    };

    Button.prototype.render = function() {
      var _ref1;

      console.log('Button.render');
      this._setClasses();
      if (this._options.label) {
        if (this._options.type === 'icon') {
          this.$el.attr('title', this._options.label);
        } else {
          this.$el.text(this._options.label);
        }
      }
      if ((_ref1 = this._options.type) === 'icon' || _ref1 === 'icon+text') {
        this.$el.prepend('<div class="Button-icon-display"></div>');
      }
      if (this._options.spinner) {
        this.$el.append('<div class="Button-spinner-display"></div>');
      }
      this.delegateEvents();
      return this.el;
    };

    Button.prototype.disable = function() {
      console.log('Button.disable');
      this._is_enabled = false;
      this.$el.attr('disabled', true);
      return this._setInactive();
    };

    Button.prototype.enable = function() {
      console.log('Button.enable');
      this._is_enabled = true;
      this.$el.removeAttr('disabled');
      return this._setInactive();
    };

    Button.prototype.isEnabled = function() {
      return this._is_enabled;
    };

    Button.prototype.toggleEnabled = function() {
      console.log('Button.toggleEnabled');
      if (this._is_enabled) {
        this.disable();
      } else {
        this.enable();
      }
      return this._is_enabled;
    };

    Button.prototype._setActive = function() {
      return this.$el.addClass('active');
    };

    Button.prototype._setInactive = function() {
      return this.$el.removeClass('active');
    };

    Button.prototype.events = {
      'click': '_handleClick'
    };

    Button.prototype._handleClick = function(e) {
      console.log('click!');
      if (e != null) {
        e.stopPropagation();
      }
      if (this._options.spinner) {
        this.disable();
        this._setActive();
      }
      this._options.action(this);
    };

    Button.prototype.getPosition = function() {
      var height, left, top, width, x, y, _ref1;

      _ref1 = this.$el.offset(), top = _ref1.top, left = _ref1.left;
      width = this.$el.width();
      height = this.$el.height();
      x = left + width / 2;
      y = top + height / 2;
      return {
        x: x,
        y: y
      };
    };

    Button.prototype.getSize = function() {
      return {
        width: this.$el.width(),
        height: this.$el.height()
      };
    };

    Button.prototype.hide = function() {
      this.$el.hide();
      return this;
    };

    Button.prototype.show = function() {
      this.$el.show();
      return this;
    };

    return Button;

  })(View);

  module.exports = Button;

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var Popover, View, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  View = Backbone.View;

  Popover = (function(_super) {
    __extends(Popover, _super);

    function Popover() {
      this.toggle = __bind(this.toggle, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.setPosition = __bind(this.setPosition, this);
      this.render = __bind(this.render, this);      _ref = Popover.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Popover.prototype.className = 'Popover';

    Popover.prototype.initialize = function(options) {
      this._options = _.extend({}, {
        origin: '',
        contents: [],
        width: 500,
        offset: [0, 0],
        close_on_outside: false
      }, options);
      this._setClasses();
      return this._is_showing = false;
    };

    Popover.prototype._setClasses = function() {
      return this.$el.addClass("" + this.className + "-" + this._options.origin);
    };

    Popover.prototype.render = function() {
      var _this = this;

      this.$el.html("<div class=\"Popover-contents\"></div>");
      this._$contents = this.$el.find('.Popover-contents');
      this._$contents.css({
        width: this._options.width
      });
      _.each(this._options.contents, function(item) {
        return _this._$contents.append(item.render());
      });
      return this.el;
    };

    Popover.prototype.setPosition = function(_arg) {
      var edge, offset_x, offset_y, position, strToPos, x, y, _ref1,
        _this = this;

      x = _arg.x, y = _arg.y;
      console.log(x, y);
      offset_x = 0;
      offset_y = 0;
      strToPos = function(str) {
        switch (str) {
          case 'left':
            return offset_x = 0;
          case 'right':
            return offset_x = _this._$contents.width();
          case 'top':
            return offset_y = 0;
          case 'bottom':
            return offset_y = _this._$contents.height();
        }
      };
      _ref1 = this._options.origin.split('-'), edge = _ref1[0], position = _ref1[1];
      strToPos(edge);
      strToPos(position);
      if (edge === 'center') {
        offset_y = this._$contents.height() / 2;
      }
      if (position === 'center') {
        offset_x = this._$contents.width() / 2;
      }
      console.log(edge, position, offset_x, offset_y, this._options.offset);
      this.$el.css({
        left: x + this._options.offset[0],
        top: y + this._options.offset[1]
      });
      return this._$contents.css({
        left: 0 - offset_x,
        top: 0 - offset_y
      });
    };

    Popover.prototype.show = function() {
      var _this = this;

      console.log('showing popover');
      this._is_showing = true;
      $('body').append(this.render());
      if (this._options.close_on_outside) {
        return _.defer(function() {
          return $(window).one('click', _this.hide);
        });
      }
    };

    Popover.prototype.hide = function() {
      console.log('hiding popover');
      this._is_showing = false;
      return this.$el.detach();
    };

    Popover.prototype.toggle = function(trigger) {
      var _this = this;

      if (this._is_showing) {
        this.hide();
      } else {
        _.defer(function() {
          return _this.setPosition(trigger.getPosition());
        });
        this.show();
      }
      return this._is_showing;
    };

    Popover.prototype.events = {
      'click': '_trapClick'
    };

    Popover.prototype._trapClick = function(e) {
      return e.stopPropagation();
    };

    return Popover;

  })(View);

  module.exports = Popover;

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var KEYCODES, StringInput, View, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  View = Backbone.View;

  StringInput = (function(_super) {
    __extends(StringInput, _super);

    function StringInput() {
      _ref = StringInput.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    StringInput.__doc__ = "";

    StringInput.prototype.tagName = 'DIV';

    StringInput.prototype.className = 'StringInput';

    StringInput.prototype.initialize = function(options) {
      this._is_enabled = true;
      this._options = _.extend({}, {
        tokenize: null,
        "class": null,
        helptext: null,
        enabled: true,
        multiline: false,
        unique: false,
        placeholder: '',
        label: '',
        extra_classes: [],
        value: '',
        size: {
          width: 'flex',
          height: 100
        },
        on: {}
      }, options);
      this._validateOptions();
      this.setValue(this._options.value);
      this.setSize(this._options.size);
      if (!this._options.enabled) {
        this.disable();
      }
      return this.render();
    };

    StringInput.prototype._validateOptions = function() {};

    StringInput.prototype._setClasses = function() {
      var class_list;

      class_list = [];
      if (this._options.tokenize != null) {
        class_list.push('StringInput-tokenize');
      }
      class_list.push.apply(class_list, this._options.extra_classes);
      return this.$el.addClass(class_list.join(' '));
    };

    StringInput.prototype.render = function() {
      this._setClasses();
      this._ui = {};
      if (this._options.tokenize) {
        this.$el.html("<label class=\"StringInput-label\">\n    " + this._options.label + "\n</label>\n<div class=\"StringInput-token-form\">\n    <div class=\"StringInput-tokens\"></div>\n    <input class=\"StringInput-input\" placeholder=\"" + this._options.placeholder + "\">\n</div>");
        this._ui.tokens = this.$el.find('.StringInput-tokens');
      } else if (this._options.multiline) {
        this.$el.html("<label class=\"StringInput-label\">\n    " + this._options.label + "\n    <textarea class=\"StringInput-input\" placeholder=\"" + this._options.placeholder + "\"></textarea>\n</label>");
      } else {
        this.$el.html("<label class=\"StringInput-label\">\n    " + this._options.label + "\n    <input class=\"StringInput-input\" placeholder=\"" + this._options.placeholder + "\">\n</label>");
      }
      this._ui.input = this.$el.find('.StringInput-input');
      if (this._options.tokenize) {
        this._renderTokens();
      }
      this.delegateEvents();
      return this.el;
    };

    StringInput.prototype.disable = function() {
      this._is_enabled = false;
      return this.$el.attr('disabled', true);
    };

    StringInput.prototype.enable = function() {
      this._is_enabled = true;
      return this.$el.removeAttr('disabled');
    };

    StringInput.prototype.isEnabled = function() {
      return this._is_enabled;
    };

    StringInput.prototype.toggleEnabled = function() {
      if (this._is_enabled) {
        this.disable();
      } else {
        this.enable();
      }
      return this._is_enabled;
    };

    StringInput.prototype.setValue = function(value) {
      this.raw_value = '';
      if (this._options.tokenize) {
        this.value = value ? value : [];
        this.raw_value = this.value.join(this._options.tokenize);
        this._current_token = '';
      } else {
        this.value = value;
      }
      this.render();
      return this;
    };

    StringInput.prototype.setSize = function(_arg) {
      var height, width;

      width = _arg.width, height = _arg.height;
      if (width != null) {
        this._width = width;
      }
      if (height != null) {
        this._height = height;
      }
      return this.$el.css({
        width: this._width,
        height: this._height
      });
    };

    StringInput.prototype._setActive = function() {
      return this.$el.addClass('active');
    };

    StringInput.prototype._setInactive = function() {
      return this.$el.removeClass('active');
    };

    StringInput.prototype.getPosition = function() {
      var height, left, top, width, x, y, _ref1;

      _ref1 = this.$el.offset(), top = _ref1.top, left = _ref1.left;
      width = this.$el.width();
      height = this.$el.height();
      x = left + width / 2;
      y = top + height / 2;
      return {
        x: x,
        y: y
      };
    };

    StringInput.prototype._renderTokens = function() {
      var _this = this;

      this._ui.tokens.empty();
      return _.each(this.value, function(token) {
        var $el;

        $el = $("<span class='StringInput-token'>\n    <span class=\"StringInput-token-value\"></span>\n    <button class=\"StringInput-token-remove\">x</button>\n</span>");
        $el.find('.StringInput-token-value').text(token);
        $el.find('.StringInput-token-remove').on('click', function() {
          return _this._removeToken(token);
        });
        return _this._ui.tokens.append($el);
      });
    };

    StringInput.prototype._updatePlaceholder = function() {
      console.log('_updatePlaceholder', this.value.length);
      if (this.value.length > 0) {
        return this._ui.input.attr('placeholder', '');
      } else {
        return this._ui.input.attr('placeholder', this._options.placeholder);
      }
    };

    StringInput.prototype.events = {
      'keydown    .StringInput-input': '_handleInput',
      'paste      .StringInput-input': '_processPaste',
      'click      .StringInput-token-form': '_focusInput',
      'focus      .StringInput-input': '_fireFocus',
      'blur       .StringInput-input': '_fireBlur'
    };

    StringInput.prototype._focusInput = function() {
      return this._ui.input.focus();
    };

    StringInput.prototype._fireFocus = function() {
      var _base;

      return typeof (_base = this._options.on).focus === "function" ? _base.focus(this, this.value) : void 0;
    };

    StringInput.prototype._fireBlur = function() {
      var _base;

      return typeof (_base = this._options.on).blur === "function" ? _base.blur(this, this.value) : void 0;
    };

    StringInput.prototype._removeToken = function(token) {
      this.value = _.without(this.value, token);
      this._renderTokens();
      this.raw_value = this.value.join(this._options.tokenize);
      return this._options.action(this, this.value, this.raw_value);
    };

    StringInput.prototype._processPaste = function(e) {
      var _this = this;

      _.defer(function() {
        var incoming_value, _ref1;

        if (_this._options.tokenize != null) {
          incoming_value = _this._ui.input.val();
          _this._ui.input.val('');
          incoming_value = incoming_value.split(_this._options.tokenize);
          incoming_value = _.map(incoming_value, function(x) {
            return x.trim();
          });
          (_ref1 = _this.value).push.apply(_ref1, incoming_value);
          _this._renderTokens();
        }
        return _this._options.action(_this, _this.value, _this.raw_value);
      });
    };

    StringInput.prototype._handleInput = function(e) {
      var was_token_trigger, _ref1,
        _this = this;

      was_token_trigger = (_ref1 = e.which) === KEYCODES.ENTER || _ref1 === KEYCODES.TAB;
      if (this._options.tokenize) {
        if (was_token_trigger) {
          e.preventDefault();
        }
        _.defer(function() {
          var incoming_char, incoming_value, prev_token, was_token_delimiter;

          incoming_value = _this._ui.input.val();
          if (incoming_value.length > 0) {
            was_token_delimiter = false;
            incoming_char = '';
            if (incoming_value[incoming_value.length - 1] === _this._options.tokenize) {
              incoming_value = incoming_value.split('');
              incoming_char = incoming_value.pop();
              incoming_value = incoming_value.join('');
              was_token_delimiter = true;
            }
            console.log(was_token_delimiter, incoming_value);
            if (was_token_delimiter || was_token_trigger) {
              incoming_value = incoming_value.trim();
              _this._ui.input.val('');
              if (incoming_value && !(_this._options.unique && __indexOf.call(_this.value, incoming_value) >= 0)) {
                _this.raw_value += incoming_char;
                _this.value.push(incoming_value);
                _this._renderTokens();
                _this._options.action(_this, _this.value, _this.raw_value);
              }
            }
          } else {
            if (e.which === KEYCODES.DELETE) {
              prev_token = _this.value.pop();
              _this._renderTokens();
              _this._ui.input.val(prev_token);
              _this.raw_value = _this.value.join(_this._options.tokenize);
              _this._options.action(_this, _this.value, _this.raw_value);
            }
          }
          return _this._updatePlaceholder();
        });
      } else {
        _.defer(function() {
          _this.raw_value = _this.value = _this._ui.input.val();
          return _this._options.action(_this, _this.value, _this.raw_value);
        });
      }
    };

    return StringInput;

  })(View);

  KEYCODES = {
    DELETE: 8,
    TAB: 9,
    ENTER: 13
  };

  module.exports = StringInput;

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
(function() {
  var $window, Layout, Panel, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  $window = $(window);

  Panel = (function(_super) {
    __extends(Panel, _super);

    function Panel() {
      _ref = Panel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Panel.prototype.className = 'Panel';

    Panel.prototype.initialize = function(layout) {
      this.layout = layout;
    };

    Panel.prototype.render = function() {
      console.log('Panel.render');
      return this.el;
    };

    Panel.prototype.setLayout = function(layout) {
      this.layout = layout;
      return this.$el.css({
        width: this.layout.width,
        height: this.layout.height,
        position: 'absolute',
        left: this.layout.left,
        top: this.layout.top,
        background: this.layout.background,
        overflow: 'scroll',
        'transition-property': 'all',
        'transition-duration': '0.1s'
      });
    };

    Panel.prototype.setContent = function(contents) {
      var _this = this;

      this.$el.empty();
      return _.each(contents, function(item) {
        return _this.$el.append(item.render());
      });
    };

    return Panel;

  })(Backbone.View);

  Layout = (function(_super) {
    __extends(Layout, _super);

    function Layout() {
      this.setPanelSize = __bind(this.setPanelSize, this);
      this.setPanelContent = __bind(this.setPanelContent, this);
      this.getPanel = __bind(this.getPanel, this);
      this.resize = __bind(this.resize, this);      _ref1 = Layout.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Layout.prototype.className = 'Layout';

    Layout.prototype.initialize = function(_arg) {
      var _this = this;

      this.row_first = _arg.row_first, this.layout = _arg.layout;
      this.panels = [];
      this.$el.css({
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'rgba(240,240,240,0.5)'
      });
      this.layout.forEach(function(col, icol) {
        var col_list;

        col_list = [];
        _this.panels.push(col_list);
        return col[1].forEach(function(row, irow) {
          return col_list.push(new Panel());
        });
      });
      return $(window).on('resize', _.debounce(this.resize, 50));
    };

    Layout.prototype.render = function() {
      var _this = this;

      console.log('Layout.render');
      this.$el.empty();
      this.panels.forEach(function(col) {
        return col.forEach(function(panel) {
          return _this.$el.append(panel.render());
        });
      });
      return this.resize();
    };

    Layout.prototype.resize = function() {
      var fixed_row_size, h_so_far, num_flex_rows, num_panels, row_flex_size, window_height, window_width, _ref2,
        _this = this;

      window_width = $(window).width();
      window_height = $(window).height();
      if (!this.row_first) {
        _ref2 = [window_width, window_height], window_height = _ref2[0], window_width = _ref2[1];
      }
      num_flex_rows = 0;
      fixed_row_size = 0;
      _.each(this.layout, function(row) {
        if (row[0] === 'flex') {
          return num_flex_rows += 1;
        } else {
          return fixed_row_size += row[0];
        }
      });
      h_so_far = 0;
      row_flex_size = (window_height - fixed_row_size) / num_flex_rows;
      num_panels = 0;
      return _.each(this.layout, function(row, irow) {
        var col_flex_size, cols, fixed_col_size, h, num_flex_cols, row_height, w_so_far;

        row_height = row[0], cols = row[1];
        h = row_height === 'flex' ? row_flex_size : row_height;
        num_flex_cols = 0;
        fixed_col_size = 0;
        _.each(cols, function(col) {
          if (col === 'flex') {
            return num_flex_cols += 1;
          } else {
            return fixed_col_size += col;
          }
        });
        col_flex_size = (window_width - fixed_col_size) / num_flex_cols;
        w_so_far = 0;
        _.each(cols, function(col, icol) {
          var layout_to_set, w;

          w = col === 'flex' ? col_flex_size : col;
          num_panels += 1;
          if (_this.row_first) {
            layout_to_set = {
              left: w_so_far,
              width: w,
              top: h_so_far,
              height: h
            };
          } else {
            layout_to_set = {
              top: w_so_far,
              height: w,
              left: h_so_far,
              width: h
            };
          }
          layout_to_set.background = "rgba(255,0,0,0." + num_panels + ")";
          _this.panels[irow][icol].setLayout(layout_to_set);
          return w_so_far += w;
        });
        return h_so_far += h;
      });
    };

    Layout.prototype.getPanel = function(i, j) {
      return this.panels[i][j];
    };

    Layout.prototype.setPanelContent = function() {
      var contents, i, j;

      i = arguments[0], j = arguments[1], contents = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return this.panels[i][j].setContent(contents);
    };

    Layout.prototype.setPanelSize = function(i, j, dim) {
      this.layout[i][1][j] = dim;
      return this.resize();
    };

    return Layout;

  })(Backbone.View);

  Layout.Panel = Panel;

  module.exports = Layout;

}).call(this);

},{}]},{},[1])
;