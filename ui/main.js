// Generated by CoffeeScript 1.6.2
(function() {
  var $window, Button, Channel, ChannelCollection, ChannelListItem, Collection, FilePicker, ListItem, ListView, MessageListItem, Model, NewMessageForm, ONE_WEEK, StringInput, View, activateChannel, active_channel, active_channel_messages, channel_collection, renderAttachmentContent, sendFile, setUpInterface, withinRange, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $window = $(window);

  _ref = window.Doodad, Button = _ref.Button, StringInput = _ref.StringInput;

  _ref1 = window.Backbone, View = _ref1.View, Model = _ref1.Model, Collection = _ref1.Collection;

  Channel = (function(_super) {
    __extends(Channel, _super);

    function Channel() {
      this.sendNewMessage = __bind(this.sendNewMessage, this);      _ref2 = Channel.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Channel.prototype.sendNewMessage = function(body, attachments, cb) {
      var _this = this;

      console.log(this.get('messages_url'), body, attachments);
      return $.post(this.get('messages_url'), {
        body: body
      }, function(success) {
        var done, new_message;

        new_message = JSON.parse(success);
        done = function() {
          active_channel_messages.fetch();
          return cb();
        };
        if (attachments.length > 0) {
          return _this.sendAttachments(new_message, attachments, done);
        } else {
          return done();
        }
      });
    };

    Channel.prototype.getType = function() {
      if (this.get('inbox_count') != null) {
        if (this.get('outbox_count') != null) {
          return 'message';
        }
        return 'subscription';
      }
      return 'broadcast';
    };

    Channel.prototype.sendAttachments = function(message, attachments, callback) {
      var num_sent;

      num_sent = 0;
      return _.each(attachments, function(file) {
        return sendFile(message.attachments_url, file, function() {
          num_sent += 1;
          if (num_sent === attachments.length) {
            return typeof callback === "function" ? callback() : void 0;
          }
        });
      });
    };

    return Channel;

  })(Model);

  sendFile = function(url, file, callback) {
    var form_data, xhr;

    console.log(url, file);
    xhr = new XMLHttpRequest();
    xhr.open('POST', url, true);
    xhr.upload.onprogress = function(e) {
      if (e.loaded === e.total) {
        return callback();
      }
    };
    form_data = new FormData();
    form_data.append('file', file, file.name);
    return xhr.send(form_data);
  };

  ChannelCollection = (function(_super) {
    __extends(ChannelCollection, _super);

    function ChannelCollection() {
      _ref3 = ChannelCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    ChannelCollection.prototype.model = Channel;

    return ChannelCollection;

  })(Collection);

  active_channel = null;

  channel_collection = new ChannelCollection();

  channel_collection.url = '/channels';

  channel_collection.on('sync', function() {
    return console.log('reset!', channel_collection);
  });

  ListItem = (function(_super) {
    __extends(ListItem, _super);

    function ListItem() {
      _ref4 = ListItem.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    ListItem.prototype.className = 'ListItem';

    ListItem.prototype.tagName = 'li';

    ListItem.prototype.render = function() {
      return this.el;
    };

    return ListItem;

  })(View);

  ChannelListItem = (function(_super) {
    __extends(ChannelListItem, _super);

    function ChannelListItem() {
      _ref5 = ChannelListItem.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    ChannelListItem.prototype.render = function() {
      var total;

      total = 0;
      if (this.model.get('inbox_count') != null) {
        total += this.model.get('inbox_count');
        this.$el.addClass('has_inbox');
      }
      if (this.model.get('outbox_count')) {
        total += this.model.get('outbox_count');
        this.$el.addClass('has_outbox') != null;
      }
      this.$el.text(this.model.get('name'));
      this.$el.append("<span class='count'>" + total + "</span>");
      return ChannelListItem.__super__.render.apply(this, arguments);
    };

    ChannelListItem.prototype.events = {
      'click': '_activate'
    };

    ChannelListItem.prototype._activate = function() {
      $("." + this.className + ".active").removeClass('active');
      this.$el.addClass('active');
      return activateChannel(this.model);
    };

    return ChannelListItem;

  })(ListItem);

  ONE_WEEK = 1000 * 60 * 60 * 24 * 7;

  MessageListItem = (function(_super) {
    __extends(MessageListItem, _super);

    function MessageListItem() {
      this._displayAttachments = __bind(this._displayAttachments, this);      _ref6 = MessageListItem.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    MessageListItem.prototype.render = function() {
      var from, message_date, _renderDate, _renderLink;

      this.$el.addClass("box-" + (this.model.get('box')));
      console.log(this.model.attributes);
      message_date = new Date(this.model.get('date'));
      _renderDate = function() {
        var readable_time, _pad;

        _pad = function(n) {
          if (n < 10) {
            return "0" + n;
          }
          return "" + n;
        };
        if ((new Date() - message_date) > ONE_WEEK) {
          readable_time = "" + (message_date.getFullYear()) + "-" + (message_date.getMonth() + 1) + "-" + (message_date.getDate());
        } else {
          readable_time = message_date.toRelativeTime();
        }
        return "<time datetime=\"" + message_date + "\" title=\"" + (message_date.toString()) + "\">" + readable_time + "</time>";
      };
      _renderLink = function() {
        return "<a class=\"permalink\" href=\"/#" + (message_date.getTime()) + "\">âˆž</a>";
      };
      from = this.model.get('box') === 'inbox' ? this.model.channel.get('name') : 'me';
      this.$el.html("<div class=\"meta\">\n    <span class=\"from\">" + from + "</span>\n    " + (_renderDate()) + "\n</div>\n<div class=\"body\">\n    " + (markdown.toHTML(this.model.get('body'))) + "\n</div>");
      if (this.model.get('has_attachments')) {
        this.$el.addClass('has-attachments');
        this._displayAttachments();
      }
      return this.el;
    };

    MessageListItem.prototype._displayAttachments = function() {
      var $attachments_el;

      console.log('_displayAttachments');
      $attachments_el = $('<ul class="attachments"></ul>');
      this.$el.append($attachments_el);
      return $.getJSON(this.model.get('attachments_url'), function(attachments) {
        console.log(attachments);
        return attachments.forEach(function(attachment) {
          return $attachments_el.append("<li class=\"attachment\">" + (renderAttachmentContent(attachment)) + "</li>");
        });
      });
    };

    return MessageListItem;

  })(ListItem);

  renderAttachmentContent = function(attachment) {
    var markup;

    markup = "<a href='" + attachment.url + "' target='_blank'>";
    if (attachment.type.indexOf('image') === 0) {
      markup += "<img src='" + attachment.url + "' title='" + attachment.name + "'>";
    } else {
      markup += attachment.name;
    }
    markup += '</a>';
    return markup;
  };

  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      this.render = __bind(this.render, this);      _ref7 = ListView.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    ListView.prototype.className = 'ListView';

    ListView.prototype.tagName = 'ul';

    ListView.prototype.initialize = function(opts) {
      this._collection = opts.collection;
      if (opts.item_view) {
        this._item_view = opts.item_view;
      } else {
        this._item_view = ListItem;
      }
      if (opts.filter != null) {
        this._list_filter = opts.filter;
      } else {
        this._list_filter = function() {
          return true;
        };
      }
      return this.listenTo(this._collection, 'sync', this.render);
    };

    ListView.prototype.render = function() {
      var _this = this;

      this.$el.empty();
      this._collection.each(function(item) {
        var item_view;

        if (_this._list_filter(item)) {
          item_view = new _this._item_view({
            model: item
          });
          return _this.$el.append(item_view.render());
        }
      });
      return this.el;
    };

    return ListView;

  })(View);

  withinRange = function(n, min, max) {
    if (n < min) {
      return min;
    }
    if (n > max) {
      return max;
    }
    return n;
  };

  active_channel = new Channel();

  active_channel_messages = new Collection();

  active_channel_messages.on('sync', function() {
    return active_channel_messages.each(function(msg) {
      return msg.channel = active_channel;
    });
  });

  activateChannel = function(channel) {
    active_channel.set(channel.toJSON());
    active_channel_messages.url = active_channel.get('messages_url');
    return active_channel_messages.fetch();
  };

  FilePicker = (function(_super) {
    __extends(FilePicker, _super);

    function FilePicker() {
      _ref8 = FilePicker.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    FilePicker.prototype.className = 'FilePicker';

    FilePicker.prototype.initialize = function() {
      return this.value = [];
    };

    FilePicker.prototype.render = function() {
      this.$el.html('<label>Attachments: <input type="file" multiple="true"></label>');
      this.delegateEvents();
      return this.el;
    };

    FilePicker.prototype.events = {
      'change input': '_listFiles'
    };

    FilePicker.prototype._listFiles = function(e) {
      return this.value = e.target.files;
    };

    FilePicker.prototype.reset = function() {
      this.value = [];
      this.render();
      return this;
    };

    FilePicker.prototype.hide = function() {
      this.$el.hide();
      return this;
    };

    FilePicker.prototype.show = function() {
      this.$el.show();
      return this;
    };

    return FilePicker;

  })(View);

  NewMessageForm = (function(_super) {
    __extends(NewMessageForm, _super);

    function NewMessageForm() {
      this._setListHeight = __bind(this._setListHeight, this);
      this.render = __bind(this.render, this);      _ref9 = NewMessageForm.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    NewMessageForm.prototype.initialize = function() {
      var MESSAGE_PANEL_DEFAULT_SIZE, attachments_picker, new_message_field, send_message_button,
        _this = this;

      this.listenTo(this.model, 'change', this.render);
      MESSAGE_PANEL_DEFAULT_SIZE = 50;
      new_message_field = new StringInput({
        multiline: true,
        placeholder: 'New message...',
        size: {
          width: '100%',
          height: MESSAGE_PANEL_DEFAULT_SIZE
        },
        on: {
          focus: function(si, val) {
            send_message_button.show();
            attachments_picker.show();
            return _.defer(function() {
              var new_height;

              new_height = withinRange(si._ui.input[0].scrollHeight, 200, 500);
              new_message_field.setSize({
                height: new_height
              });
              return _this._setListHeight();
            });
          },
          blur: function(si, val) {
            if (!val) {
              send_message_button.hide();
              attachments_picker.hide();
              _.defer(function() {
                return new_message_field.setSize({
                  height: MESSAGE_PANEL_DEFAULT_SIZE
                });
              });
              return _this._setListHeight();
            }
          }
        },
        action: function(si, value) {
          var new_height;

          if (value) {
            new_height = withinRange(si._ui.input[0].scrollHeight, 200, 500);
            return _.defer(function() {
              send_message_button.enable();
              new_message_field.setSize({
                height: new_height
              });
              return _this._setListHeight();
            });
          } else {
            send_message_button.disable();
            return new_message_field.setSize({
              height: MESSAGE_PANEL_DEFAULT_SIZE
            });
          }
        }
      });
      send_message_button = new Button({
        id: 'send_message_button',
        label: 'Send Message',
        spinner: true,
        enabled: false,
        action: function() {
          new_message_field.disable();
          return active_channel.sendNewMessage(new_message_field.value, attachments_picker.value, function() {
            console.log('sent message');
            send_message_button.disable().hide();
            new_message_field.setValue('');
            new_message_field.setSize({
              height: MESSAGE_PANEL_DEFAULT_SIZE
            });
            attachments_picker.reset();
            attachments_picker.hide();
            return _this._setListHeight();
          });
        }
      });
      attachments_picker = new FilePicker({
        id: 'attachments_picker'
      });
      this._new_message_field = new_message_field;
      this._send_message_button = send_message_button;
      this._attachments_picker = attachments_picker;
      send_message_button.hide();
      return attachments_picker.hide();
    };

    NewMessageForm.prototype.render = function() {
      if (this.model.getType() === 'subscription') {
        this.$el.hide();
      } else {
        this.$el.show();
      }
      this.$el.empty();
      this.$el.append(this._new_message_field.render());
      this.$el.append(this._send_message_button.render());
      this.$el.append(this._attachments_picker.render());
      return this._setListHeight();
    };

    NewMessageForm.prototype._setListHeight = function() {
      var $list_el;

      $list_el = $('#channel_messages_list');
      return _.defer(function() {
        var height;

        console.log('updating list height');
        height = $window.height() - $list_el.offset().top - 20;
        return $list_el.css({
          height: height
        });
      });
    };

    return NewMessageForm;

  })(View);

  setUpInterface = function() {
    $('#app').html("<div id=\"panel_channels\">\n    <div class=\"label\">Messages</div>\n    <ul id=\"channel_messages\"></ul>\n\n    <div class=\"label\">Broadcasts</div>\n    <ul id=\"channel_broadcasts\"></ul>\n    \n    <div class=\"label\">Subscriptions</div>\n    <ul id=\"channel_subscriptions\"></ul>\n</div>\n<div id=\"panel_messages\">\n    <div id=\"new_message_form\"></div>\n    <ul id=\"channel_messages_list\"></ul>\n</div>");
    new ListView({
      collection: channel_collection,
      el: $('#channel_messages'),
      filter: function(c) {
        return c.getType() === 'message';
      },
      item_view: ChannelListItem
    });
    new ListView({
      collection: channel_collection,
      el: $('#channel_broadcasts'),
      filter: function(c) {
        return c.getType() === 'broadcast';
      },
      item_view: ChannelListItem
    });
    new ListView({
      collection: channel_collection,
      el: $('#channel_subscriptions'),
      filter: function(c) {
        return c.getType() === 'subscription';
      },
      item_view: ChannelListItem
    });
    new NewMessageForm({
      model: active_channel,
      el: $('#new_message_form')
    });
    return new ListView({
      collection: active_channel_messages,
      item_view: MessageListItem,
      el: $('#channel_messages_list')
    });
  };

  setUpInterface();

  channel_collection.fetch();

}).call(this);
