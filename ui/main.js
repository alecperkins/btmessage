// Generated by CoffeeScript 1.6.2
(function() {
  var Button, Channel, Layout, Model, ModelValue, StringInput, View, active_channel, layout, _ref, _ref1, _ref2, _ref3, _ref4,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Layout = window.Layout.Layout;

  _ref = window.Backbone, View = _ref.View, Model = _ref.Model;

  layout = new Layout({
    el: $('#app'),
    row_first: false,
    layout: [[200, [200, 200, 'flex']], ['flex', [30, 200, 'flex']]]
  });

  Button = (function(_super) {
    __extends(Button, _super);

    function Button() {
      _ref1 = Button.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Button.prototype.className = 'Button';

    Button.prototype.tagName = 'BUTTON';

    Button.prototype.initialize = function(_arg) {
      this.label = _arg.label;
    };

    Button.prototype.render = function() {
      this.$el.text(this.label);
      return this.el;
    };

    return Button;

  })(View);

  ModelValue = (function(_super) {
    __extends(ModelValue, _super);

    function ModelValue() {
      this.render = __bind(this.render, this);      _ref2 = ModelValue.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ModelValue.prototype.className = 'ModelValue';

    ModelValue.prototype.initialize = function(_arg) {
      this.property = _arg.property;
      return this.listenTo(this.model, "change:" + this.property, this.render);
    };

    ModelValue.prototype.render = function() {
      this.$el.html(this.model.get(this.property));
      return this.el;
    };

    return ModelValue;

  })(View);

  StringInput = (function(_super) {
    __extends(StringInput, _super);

    function StringInput() {
      this.setValue = __bind(this.setValue, this);
      this.getValue = __bind(this.getValue, this);
      this.render = __bind(this.render, this);      _ref3 = StringInput.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    StringInput.prototype.className = 'StringInput';

    StringInput.prototype.tagName = 'textarea';

    StringInput.prototype.render = function() {
      return this.el;
    };

    StringInput.prototype.getValue = function() {
      return this.$el.val();
    };

    StringInput.prototype.setValue = function(value) {
      return this.$el.val(value);
    };

    return StringInput;

  })(View);

  Channel = (function(_super) {
    __extends(Channel, _super);

    function Channel() {
      _ref4 = Channel.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    return Channel;

  })(Model);

  active_channel = new Channel({
    name: 'public-btmessage'
  });

  layout.setPanelContent(1, 0, new ModelValue({
    model: active_channel,
    property: 'name'
  }));

  layout.setPanelContent(1, 1, new StringInput(), new Button({
    label: 'Send Message'
  }));

  setTimeout(function() {
    return active_channel.set('name', 'DJASNDJKASN');
  }, 1000);

  layout.render();

}).call(this);
