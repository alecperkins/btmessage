// Generated by CoffeeScript 1.6.2
(function() {
  var Channel, DATA_FOLDER, JSONResponse, Message, app, discoverChannels, express, fs, http, index_file_content, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  index_file_content = "<!DOCTYPE html>\n<html>\n<head>\n    <title>Missive</title>\n    <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n    <link href=\"/ui/doodad-0.0.0-dev.css\" type=\"text/css\" rel=\"stylesheet\">\n    <link href=\"/ui/main.css\" type=\"text/css\" rel=\"stylesheet\">\n</head>\n<body>\n    <div id=\"app\">Loading&hellip;</div>\n    <script src=\"/ui/zepto-1.0.js\"></script>\n    <script src=\"/ui/underscore-1.5.1.js\"></script>\n    <script src=\"/ui/backbone-1.0.0.js\"></script>\n    <script src=\"/ui/doodad-0.0.0-dev.js\"></script>\n    <script src=\"/ui/markdown.js\"></script>\n    <script src=\"/ui/date.extensions.js\"></script>\n    <script src=\"/ui/main.js\"></script>\n</body>\n</html>";

  express = require('express');

  http = require('http');

  fs = require('fs');

  path = require('path');

  app = express();

  app.set('port', process.env.PORT || 3000);

  app.use(express.logger('dev'));

  app.use(express.bodyParser());

  app.use(express.methodOverride());

  app.use(app.router);

  app.use('/ui', express["static"](path.join(__dirname, '../ui')));

  if (app.get('env') === 'development') {
    app.use(express.errorHandler());
  }

  JSONResponse = function(res, data) {
    res.write(JSON.stringify(data));
    return res.end();
  };

  app.get('/', function(req, res) {
    res.write(index_file_content);
    return res.end();
  });

  DATA_FOLDER = path.join(process.env.HOME, 'missive_data');

  Channel = (function() {
    function Channel(name) {
      this.name = name;
      this.loadMessages = __bind(this.loadMessages, this);
      this.toJSON = __bind(this.toJSON, this);
      this.inbox_folder = path.join(DATA_FOLDER, this.name, 'inbox');
      this.outbox_folder = path.join(DATA_FOLDER, this.name, 'outbox');
      this.inbox_count = this._countBox(this.inbox_folder);
      this.outbox_count = this._countBox(this.outbox_folder);
      this.url = "/channels/" + this.name;
      this.messages_url = "/channels/" + this.name + "/messages";
    }

    Channel.prototype.toJSON = function() {
      return {
        inbox_count: this.inbox_count,
        outbox_count: this.outbox_count,
        url: this.url,
        messages_url: this.messages_url,
        name: this.name
      };
    };

    Channel.prototype.loadMessages = function() {
      var inbox_files, messages, outbox_files,
        _this = this;

      messages = [];
      if (this.inbox_count != null) {
        inbox_files = fs.readdirSync(this.inbox_folder);
        console.log(inbox_files);
        inbox_files.forEach(function(f) {
          if ((f != null ? f[0] : void 0) !== '.') {
            return messages.push(new Message(_this.inbox_folder, f));
          }
        });
      }
      if (this.outbox_count != null) {
        outbox_files = fs.readdirSync(this.outbox_folder);
        console.log(outbox_files);
        outbox_files.forEach(function(f) {
          if ((f != null ? f[0] : void 0) !== '.') {
            return messages.push(new Message(_this.outbox_folder, f));
          }
        });
      }
      messages.sort(function(a, b) {
        return b.date - a.date;
      });
      return messages;
    };

    Channel.prototype._countBox = function(box_folder) {
      var box_files;

      if (!fs.existsSync(box_folder)) {
        return null;
      }
      box_files = fs.readdirSync(box_folder);
      box_files = box_files.filter(function(f) {
        return (f != null ? f[0] : void 0) !== '.';
      });
      return box_files.length;
    };

    return Channel;

  })();

  Message = (function() {
    function Message(box_folder, name) {
      var day, hour, minute, month, orig, rest, second, year, _ref;

      this.box_folder = box_folder;
      this.name = name;
      this.toJSON = __bind(this.toJSON, this);
      console.log(this.box_folder, this.name);
      this._path = path.join(this.box_folder, this.name);
      _ref = this.name.match(/(\d+)-(\d+)-(\d+)T(\d+)-(\d+)-(\d+)Z.txt/), orig = _ref[0], year = _ref[1], month = _ref[2], day = _ref[3], hour = _ref[4], minute = _ref[5], second = _ref[6], rest = 8 <= _ref.length ? __slice.call(_ref, 7) : [];
      this.date = new Date("" + year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + "Z");
    }

    Message.prototype.read = function() {
      if (fs.existsSync(this._path)) {
        this.body = fs.readFileSync(this._path, {
          encoding: 'utf-8'
        });
      }
      return this.body;
    };

    Message.prototype.write = function() {
      if (this.body != null) {
        fs.writeFileSync(this._path, this.body, {
          encoding: 'utf-8'
        });
      }
    };

    Message.prototype.toJSON = function() {
      if (this.body == null) {
        this.read();
      }
      return {
        box: this.box_folder.split(path.sep).pop(),
        date: this.date.toISOString(),
        body: this.body
      };
    };

    Message.create = function(box_folder, body) {
      var day, hour, message, minute, month, name, now, second, year, _pad;

      _pad = function(n) {
        if (n < 10) {
          return "0" + n;
        }
        return "" + n;
      };
      now = new Date();
      year = now.getUTCFullYear();
      month = _pad(now.getUTCMonth() + 1);
      day = _pad(now.getUTCDate());
      hour = _pad(now.getUTCHours());
      minute = _pad(now.getUTCMinutes());
      second = _pad(now.getUTCSeconds());
      name = "" + year + "-" + month + "-" + day + "T" + hour + "-" + minute + "-" + second + "Z.txt";
      message = new Message(box_folder, name);
      message.body = body;
      message.write();
      return message;
    };

    return Message;

  })();

  discoverChannels = function() {
    var channels, files, name, _i, _len;

    files = fs.readdirSync(DATA_FOLDER);
    channels = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      name = files[_i];
      if (name[0] !== '.') {
        channels.push(new Channel(name));
      }
    }
    return channels;
  };

  app.get('/channels', function(req, res) {
    var channels;

    channels = discoverChannels();
    return JSONResponse(res, channels.map(function(c) {
      return c.toJSON();
    }));
  });

  app.get('/channels/:channel_name', function(req, res) {
    var channel;

    channel = new Channel(req.params.channel_name);
    return JSONResponse(res, channel.toJSON());
  });

  app.get('/channels/:channel_name/messages', function(req, res) {
    var channel, messages;

    channel = new Channel(req.params.channel_name);
    messages = channel.loadMessages();
    return JSONResponse(res, messages.map(function(m) {
      return m.toJSON();
    }));
  });

  app.post('/channels/:channel_name/messages', function(req, res) {
    var channel, message;

    channel = new Channel(req.params.channel_name);
    message = Message.create(channel.outbox_folder, req.body.body);
    return JSONResponse(res, message.toJSON());
  });

  http.createServer(app).listen(app.get('port'), function() {
    return console.log('Express server listening on port ' + app.get('port'));
  });

}).call(this);
